apply plugin: 'java'
apply plugin: 'java-library-distribution'
apply plugin: 'maven'

if (!hasProperty("spec")) {
    project.ext.spec = "java"
}

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7


version = '1.3.1'

repositories {
    mavenLocal()
    maven { url 'http://files.couchbase.com/maven2/' }
    mavenCentral()
}

// i don't want to run the tests. some fail, but i don't want to be responsible for fixing their bugs
test {
    exclude 'com/couchbase/lite/**'
}

def buildAgainstMavenArtifacts = false

dependencies {
    compile project(':couchbase-lite-java-core')

    compile 'com.couchbase.lite:couchbase-lite-java-sqlite-custom:' + version

    testCompile 'com.couchbase.lite:couchbase-lite-java-sqlcipher:' + version

    testCompile 'com.couchbase.lite:couchbase-lite-java-forestdb:' + version

    testCompile group: 'junit', name: 'junit', version: '4.11'

    // Dependencies for testing with couchbase-lite-android test suits
    testCompile group: 'commons-io', name: 'commons-io', version: '2.0.1'
    
    testCompile 'com.squareup.okhttp3:mockwebserver:3.3.1'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

task createMavenDirectory(type: Exec) {
    ext {
        uploadUser = System.getenv("MAVEN_UPLOAD_USERNAME") + ":" + System.getenv("MAVEN_UPLOAD_PASSWORD")
        mkcolPath = System.getenv("MAVEN_UPLOAD_REPO_URL") + "com/couchbase/lite/couchbase-lite-java/" + version + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("MAVEN_UPLOAD_REPO_URL").contains("files") }

// first create the directory, then do the upload
task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

def mavenPath() {
    System.getenv("MAVEN_BUILD_LOCAL") == "true" ?
            'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath :
            System.getenv("MAVEN_UPLOAD_REPO_URL")
}

// this will upload, but will not first create a directory (which is needed on some servers)
uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: mavenPath()) {
                authentication(userName: System.getenv("MAVEN_UPLOAD_USERNAME"), password: System.getenv("MAVEN_UPLOAD_PASSWORD"))
            }

            pom.version = version
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'couchbase-lite-java'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

task deleteExistingTests(type: Delete) {
    delete fileTree(dir: "src/test/java/com/couchbase/lite", exclude: "java")  
}

task deleteExistingAssets(type: Delete, dependsOn: deleteExistingTests) {
    delete 'src/test/resources/assets'
}

task copyAndroidTests(type: Copy, dependsOn: deleteExistingAssets) {
    from "../couchbase-lite-android/src/androidTest/java/com/couchbase/lite"
    into 'src/test/java/com/couchbase/lite'
}

task deleteBrokenTests(type: Delete, dependsOn: copyAndroidTests) {
    delete 'src/test/java/com/couchbase/lite/CollationTest.java', 'src/test/java/com/couchbase/lite/Base64Test.java'
}

task copyAndroidTestProperties(type: Copy, dependsOn: deleteBrokenTests) {
    from "../couchbase-lite-android/src/androidTest/assets"
    into 'src/test/resources/assets'
    include 'test.properties'
    filter { String line ->
        line.startsWith('sqliteLibrary') ? 'sqliteLibrary=1' : line
    }
}

task copyAndroidAssets(type: Copy, dependsOn: copyAndroidTestProperties) {
    from "../couchbase-lite-android/src/androidTest/assets"
    into 'src/test/resources/assets'
    exclude 'test.properties'
}

test {
    testLogging {
        // Logging these events to see individual test status:
        events "started", "passed", "skipped", "failed"
    }
}

test.dependsOn(copyAndroidAssets)
